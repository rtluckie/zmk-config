#include <behaviors.dtsi>
#include <behaviors/rgbled_widget.dtsi>

&caps_word {
    continue-list = <BACKSPACE DELETE UNDER MINUS>;
};

&sk {
    quick-release;
    release-after-ms = <1000>;
};

&mt {
    quick-tap-ms = <220>;
    tapping-term-ms = <220>;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <220>;
}; 


/ {
    hold-tap {
        lt_del: layer_tap_del {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            bindings = <&mo>, <&mm_bspc_del>;
            display-name = "Layer-BSp";
        };

        // lt_qt: layer_tap_qt {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <220>;
        //     quick-tap-ms = <220>;
        //     bindings = <&mo>, <&mm_qt_grv>;
        //     display-name = "Layer-Qt";
        // };

        lt_e: layer_tap_ad_e {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            bindings = <&mo>, <&ad_e>;
            display-name = "Layer-AdE";
        };

        ll: layer_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <220>;
            bindings = <&mo>, <&mo>;
            display-name = "Layer-Layer";
        };

        // ht_qu: hold_tap_qu {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <220>;
        //     bindings = <&kp>, <&qu>;
        //     display-name = "Hold-Qu";
        // };

        hrml: home_row_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            //require-prior-idle-ms = <125>;
            hold-trigger-key-positions = < KEYS_R >;
            //hold-trigger-on-release; // delay positional check until key release
            bindings =
                <&kp>,
                <&kp>;
        };
        hrmr: home_row_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            //require-prior-idle-ms = <125>;
            hold-trigger-key-positions = < KEYS_L >;
            //hold-trigger-on-release; // delay positional check until key release
            bindings =
                <&kp>,
                <&kp>;
        };
        hrsl: home_row_mods_shift_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            //require-prior-idle-ms = <125>;
            hold-trigger-key-positions = < KEYS_R >;
            //hold-trigger-on-release; // delay positional check until key release
            bindings =
                <&kp>,
                <&kp>;
        };
        hrsr: home_row_mods_shift_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            //require-prior-idle-ms = <125>;
            hold-trigger-key-positions = < KEYS_L >;
            //hold-trigger-on-release; // delay positional check until key release
            bindings =
                <&kp>,
                <&kp>;
        };
        // /omit-if-no-ref/ hrsq: home_row_semi_quote {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     tapping-term-ms = <200>;
        //     quick-tap-ms = <150>;
        //     flavor = "balanced";
        //     require-prior-idle-ms = <125>;
        //     //hold-trigger-key-positions = <list of all lhs keys>;
        //     //hold-trigger-on-release; // delay positional check until key release
        //     bindings =
        //         <&kp>,
        //         <&semiquote>;
        // };
        lttp: layer_tap_tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            //require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
            bindings =
                <&mo>,
                <&kp>;
        };
        lthp: layer_tap_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            //require-prior-idle-ms = <125>;
            flavor = "hold-preferred";
            bindings =
                <&mo>,
                <&kp>;
        };
        mttp: mod_tap_tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            //require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        mthp: mod_tap_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            //require-prior-idle-ms = <125>;
            flavor = "hold-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
    };
};


// #define HM(NAME, DISPLAY_NAME, TAP, HT_KEYPOS, RPI, TTM, QTM ...)    \
//     NAME: NAME {                                            \
//         compatible = "zmk,behavior-hold-tap";               \
//         #binding-cells = <2>;                               \
//         flavor = "balanced";                                \
//         tapping-term-ms = <TTM>;                            \
//         quick-tap-ms = <QTM>;                               \
//         // require-prior-idle-ms = <RPI>;                      \
//         bindings = <&kp>, <TAP>;                            \
//         hold-trigger-key-positions = <HT_KEYPOS THUMBS>;    \
//         // hold-trigger-on-release; // delay positional check until key release \
//         display-name = #DISPLAY_NAME;                       \
//         __VA_ARGS__                                         \
//     };

// / {
//     home-row-mod {
//         HM(hsl,   HRM Shift Left,      &kp,  KEYS_R,   0, hold-while-undecided;)
//         HM(hcl,   HRM Ctrl Left,       &kp,  KEYS_R, 200, hold-while-undecided;)
//         HM(hml,   HRM Mods Left,       &kp,  KEYS_R, 200)
//         HM(hml_m, HRM Mods-Mouse Left, &mkp, KEYS_R, 200)
//         HM(hsr,   HRM Shift Right,     &kp,  KEYS_L,   0, hold-while-undecided;)
//         HM(hcr,   HRM Ctrl Right,      &kp,  KEYS_L, 200, hold-while-undecided;)
//         HM(hmr,   HRM Mods Left,       &kp,  KEYS_L, 200)
//     };
// };


#define SM(NAME, DISPLAY_NAME, TAP, SHIFTED)    \
    NAME: NAME {                                \
        compatible = "zmk,behavior-mod-morph";  \
        #binding-cells = <0>;                   \
        bindings = <TAP>, <SHIFTED>;            \
        mods = <(MOD_RSFT|MOD_LSFT)>;           \
        display-name = #DISPLAY_NAME;           \
    };
#define SMK(NAME, DISPLAY_NAME, TAP, MODDED)    \
    NAME: NAME {                                \
        compatible = "zmk,behavior-mod-morph";  \
        #binding-cells = <0>;                   \
        bindings = <TAP>, <MODDED>;            \
        mods = <(MOD_RSFT|MOD_LSFT)>;           \
        keep-mods = <(MOD_LSFT|MOD_RSFT)>;               \
        display-name = #DISPLAY_NAME;           \
    };


#define CM(NAME, DISPLAY_NAME, TAP, MODDED)  \
    NAME: NAME {                                \
        compatible = "zmk,behavior-mod-morph";  \
        #binding-cells = <0>;                   \
        bindings = <TAP>, <MODDED>;          \
        mods = <(MOD_RCTL|MOD_LCTL)>;           \
        display-name = #DISPLAY_NAME;           \
    };

#define CMK(NAME, DISPLAY_NAME, TAP, MODDED)  \
    NAME: NAME {                                \
        compatible = "zmk,behavior-mod-morph";  \
        #binding-cells = <0>;                   \
        bindings = <TAP>, <MODDED>;          \
        mods = <(MOD_RCTL|MOD_LCTL)>;           \
        keep-mods = <(MOD_LCTL|MOD_RCTL)>;               \
        display-name = #DISPLAY_NAME;           \
    };


#define GM(NAME, DISPLAY_NAME, TAP, MODDED)      \
    NAME: NAME {                                \
        compatible = "zmk,behavior-mod-morph";  \
        #binding-cells = <0>;                   \
        bindings = <TAP>, <MODDED>;              \
        mods = <(MOD_RGUI|MOD_LGUI)>;           \
        display-name = #DISPLAY_NAME;           \
    };
#define GMK(NAME, DISPLAY_NAME, TAP, MODDED)      \
    NAME: NAME {                                \
        compatible = "zmk,behavior-mod-morph";  \
        #binding-cells = <0>;                   \
        bindings = <TAP>, <MODDED>;              \
        mods = <(MOD_RGUI|MOD_LGUI)>;           \
        keep-mods = <(MOD_LGUI|MOD_RGUI)>;               \
        display-name = #DISPLAY_NAME;           \
    };
#define MASKED(NAME, DISPLAY_NAME, MODS, BINDING)   \
    NAME: NAME {                                    \
        compatible = "zmk,behavior-mod-morph";      \
        #binding-cells = <0>;                       \
        bindings = <BINDING>, <BINDING>;            \
        mods = <MODS>;                              \
        display-name = #DISPLAY_NAME;               \
    };

/ {
    mod-morph {
        SM(mm_qexcl,    SM Qmark-Excl, &kp QMARK,  &kp EXCL)
        SM(mm_comma_semi_meh, SM Comma-Semi-Meh, &hrmr RMEH COMMA, &kp SEMI)
        SM(mm_dot_colon_gui, SM -Colon-Gui, &hrmr RGUI DOT, &kp COLON)

        SM(mm_bspc_del, SM BSp-Del,    &kp BSPC,      &kp DEL)

        // SM(mm_sqt_dqt,       SM Sqt-Dqt,       &kp SQT,   &kp DQT)
        // CM(mm_qt_grv,        CM Qt-Grv,        &td_sqt_dqt,     &kp GRAVE)
        // SM(mm_sqt_dqt, SM Macro Sqt-Dqt, &sqt_macro,   &dqt_macro)
        // SM(mm_grv_dgrv,      SM Grv-DGrqu,     &kp GRAVE, &dgrv_macro)

        SM(mm_lpar_lbkt, SM LPar-LBkt,     &kp LPAR, &kp LBKT)
        SM(mm_rpar_rbkt, SM RPar-RBkt,     &kp RPAR, &kp RBKT)
        SM(mm_par_bkt,   SM Macro Par-Bkt, &par_macro,  &bkt_macro)

        SM(mm_lbrc_lt, SM LBrc-LT,       &kp LBRC, &kp LT)
        SM(mm_rbrc_gt, SM RBrc-GT,       &kp RBRC, &kp GT)
        SM(mm_brc_lgt, SM Macro Brc-LGT, &brc_macro,  &lgt_macro)

        SM(mm_p_tab_desk, SM Prev Tab-Desk, &kp LC(LS(TAB)), &kp LC(LG(LEFT)))
        SM(mm_n_tab_desk, SM Next Tab-Desk, &kp LC(TAB), &kp LC(LG(RIGHT)))

        MASKED(mm_left_masked, Masked Left, (MOD_RSFT|MOD_LSFT), &kp LEFT)
        // MASKED(u_masked,    Masked U,    (MOD_RSFT|MOD_LSFT), &kp U)
    };
};


#define TD(NAME, DISPLAY_NAME, TAP1, TAP2, ...)                             \
    NAME: NAME {                                                            \
        compatible = "zmk,behavior-tap-dance";                              \
        #binding-cells = <0>;                                               \
        tapping-term-ms = <200>;                                            \
        bindings = <TAP1>, <TAP2> __VA_OPT__(, <)__VA_ARGS__ __VA_OPT__(>); \
        display-name = #DISPLAY_NAME;                                       \
    };

/ {
    tap-dance {
        // TD(td_sqt_dqt, Sqt-Dqt, &sqt_dqt, &mm_sqt_dqt)

        TD(td_bts_0, TD BT0 Sel-Disc, &bts 0, &bt BT_DISC 0)
        TD(td_bts_1, TD BT1 Sel-Disc, &bts 1, &bt BT_DISC 1)
        TD(td_bts_2, TD BT2 Sel-Disc, &bts 2, &bt BT_DISC 2)

        TD(td_kns_lock, TD CLCK-NLCK-SLCK, &kp CLCK, &kp KP_NLCK, &kp SLCK)

        TD(td_pp_n, TD PlayPause-Next, &kp C_PP, &kp C_NEXT)
        TD(td_copy_cut, TD Copy-Cut, &kp LG(C), &kp LG(X))
        TD(td_undo_redo, TD Undo-Redo, &kp LG(Z), &kp LG(LS(Z)))
        TD(td_close_reopen, TD Tab Close-Reopen, &mt LA(F4) LC(W), &kp LC(LS(T)))
    };
};


/ {
    tri-state {
        alt_tabber: swapper {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <RT2 RM1 RM2 RM3>; // arrow keys
            timeout-ms = <5000>;
            display-name = "Swapper";
        };

        sel_word: sel_word {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&sel_word_base>, <&kp LS(LC(RIGHT))>, <&none>;
            tap-ms = <0>;
            display-name = "Select Word";
        };

        sel_line: sel_line {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&sel_line_base>, <&sel_line_next>, <&none>;
            tap-ms = <0>;
            display-name = "Select Line";
        };
    };


    antecedent-morph {
        ad_u: adaptive_u {
            compatible = "zmk,behavior-antecedent-morph";
            #binding-cells = <0>;
            defaults = <&kp U>;
            bindings =   <&kp EQUAL>, <&kp EQUAL>;
            antecedents = <LT           GT>;
            max-delay-ms = <1000>;
            display-name = "Adaptive U";
        };

        // ad_comma: adaptive_comma {
        //     compatible = "zmk,behavior-antecedent-morph";
        //     #binding-cells = <0>;
        //     defaults = <&kp COMMA>;
        //     bindings =   <&kp EQUAL>, <&include_macro>, <&kp FSLH>;
        //     antecedents = <EXCL         HASH           DOT>;
        //     max-delay-ms = <1000>;
        //     display-name = "Adaptive Comma";
        // };

        ad_e: adaptive_e {
            compatible = "zmk,behavior-antecedent-morph";
            #binding-cells = <0>;
            defaults = <&kp E>;
            bindings =   <&kp GT>, <&kp GT>, <&kp GT>;
            antecedents = <MINUS     EQUAL     PIPE>;
            max-delay-ms = <1000>;
            display-name = "Adaptive E";
        };
    };
};
